_format_version: "3.0"
_transform: true

services:
  - name: start-page
    url: http://users-service:9065
    routes:
      - name: users
        paths:
          - /users
        plugins:
          - name: jwt

  - name: users-service
    url: http://users-service:9065
    routes:
      - name: get-user-by-id
        methods: [GET]
        paths:
          - ~/users/([a-f0-9\-]+)
        strip_path: false
        regex_priority: 1

      - name: update-user-by-id
        methods: [PUT]
        paths:
          - ~/users/([a-f0-9\-]+)
        strip_path: false
        regex_priority: 2

      - name: delete-user-by-id
        methods: [DELETE]
        paths:
          - ~/users/([a-f0-9\-]+)
        strip_path: false
        regex_priority: 2

      - name: users-oauth2-token
        paths:
          - /oauth2/token
        strip_path: false
        methods:
          - GET
          - POST
        regex_priority: 10

consumers:
  - id: "1a2c6b27-a005-408d-8d59-3cb82ddadff3"
    username: oauth2-client
    custom_id: oauth2-client-id
    jwt_secrets:
      - key: my-key
        secret: my-secret
        algorithm: HS256

plugins:
  - name: file-log
    config:
      path: /tmp/kong-access.log


routes:
  - name: users-oauth2-authorize # для UI
    paths:
      - /users/oauth2/authorize
    methods:
      - GET
      - POST
    strip_path: false
    regex_priority: 10
    service:
      name: users-service # object
    plugins:
      - name: oauth2
        config:
          enable_authorization_code: true
          enable_client_credentials: true
          scopes:
            - read
            - write
          provision_key: "some_provision_key"
          mandatory_scope: true
          global_credentials: true
          accept_http_if_already_terminated: true # Разрешаем http запросы (только dev)
          #redirect_uris:
          #- http://localhost:8080/cb
      #- name: jwt
      #  config:
      #    #anonymous: <consumer_id>  # Если вы используете анонимного потребителя
      #    secret_is_base64: false  # Если ключ - это строка (не base64)
      #    claims_to_verify:  # Если нужно проверить какие-то claims
      #      - exp  # Пример: проверка срока действия токена
      #    run_on_preflight: true  # Обработка CORS запросов



# client_id - генерируется отдельно, когда создаёшь oauth2 credentials для consumer-а. 
# По ссылке http://localhost:8001/consumers/oauth2-client/oauth2 пожно посмотреть credentials consumer-а и там ячейка client_id.

#  response_type - это просто строка, ты сам задаёшь её в запросе, в зависимости от типа flow. У тебя включён enable_authorization_code, значит — code.

#  scope - Это те значения, которые ты задал при включении OAuth2-плагина на маршруте (scopes): указывать read

#  provision_key - Из конфигурации OAuth2-плагина:
#  "provision_key": "some_provision_key"

#  redirect_uri - в credentials от consumer:

# "redirect_uris": [
#    "http://localhost/callback"
#  ]

#  authenticated_userid — это ID пользователя из твоей базы данных, а не ID consumer-а.

#  у route должна быть привязка к service